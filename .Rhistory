spin[x-1, y-1] + spin[x-1, y+1] + spin[x+1, y-1] + spin[x+1, y+1])
# calculate probability of accepting flip
alpha <- min(1, exp(-deltaE / T))
# propose flip and accept or reject based on probability
if (runif(1) < alpha) {
spin[x, y] <- -spin[x, y]
}
}
}
}
# calculate magnetization
mag <- sum(spin) / (N^2)
# plot final spin configuration
image(spin, col = c("white", "black"))
image(S)
n <- 10 # number of spins in each dimension
J <- 1 # coupling constant
T <- 1 # temperature
n_iter <- 10000 # number of iterations
# initialize spin configuration
s <- matrix(rbinom(n^2, 1, 0.5)*2-1, n, n)
# define energy function
energy <- function(s, J) {
-J * sum(s * c(s[-1,], s[1,]) + s * c(s[,-1], s[,1]))
}
# define probability function
prob <- function(s, i, j, J, T) {
exp(-energy(s, J) / T) / (exp(energy(s, J) / T) + exp(-energy(s, J) / T))
}
# run Gibbs sampler
for (k in 1:n_iter) {
for (i in 1:n) {
for (j in 1:n) {
# calculate probability of spin i,j being +1
p <- prob(s, i, j, J, T)
# update spin i,j
s[i,j] <- ifelse(runif(1) < p, 1, -1)
}
}
}
image(s)
i <-1
j <-2
(i,j)==(1,1)
J <-2
1<J ã€Š3
1<J < 3
i <-1
i==1
S <- matrix(sample(c(-1,1),10*10,replace =T),nrow=10)
S
knitr::opts_chunk$set(echo = TRUE)
W <- function(i,j){
left <- ifelse(j==1,0,S[i-1,j])
right <- ifelse(j==n,0,S[i+1,j])
up <- ifelse(i==1,0,S[i-1,j])
down <- ifelse(i=n,0,S[i+1,j])
W <- sum(left,right,up,down)
return(W)
}
W(1,1)
W(1,1,10)
n <-10
W(1,1)
W <- function(i,j){
left <- ifelse(j==1,0,S[i-1,j])
right <- ifelse(j==n,0,S[i+1,j])
up <- ifelse(i==1,0,S[i-1,j])
down <- ifelse(i==n,0,S[i+1,j])
W <- sum(left,right,up,down)
return(W)
}
W(1,1)
S <- matrix(sample(c(-1,1),4*4,replace =T),nrow=4)
S
W(1,1)
W(1,2)
n <-4
W(1,2)
i <-1
j <-1
left <- ifelse(j==1,0,S[i-1,j])
left
right <- ifelse(j==n,0,S[i+1,j])
up <- ifelse(i==1,0,S[i-1,j])
down <- ifelse(i==n,0,S[i+1,j])
right
down
up
S[i,j]
S[i+1,j]
S
I <-1
i<-1
j <-1
left <- ifelse(j==1,0,S[i-1,j])
right <- ifelse(j==n,0,S[i+1,j])
up <- ifelse(i==1,0,S[i-1,j])
down <- ifelse(i==n,0,S[i+1,j])
left
right
left <- ifelse(j==1,0,S[i-1,j])
right <- ifelse(j==n,0,S[i+1,j])
up <- ifelse(i==1,0,S[i-1,j])
down <- ifelse(i==n,0,S[i+1,j])
left <- ifelse(j==1,0,S[i-1,j])
right <- ifelse(j==n,0,S[i+1,j])
up <- ifelse(i==1,0,S[i-1,j])
down <- ifelse(i==n,0,S[i+1,j])
ifelse(j==n,0,S[i+1,j])
ifelse(j==n,0,S[i+1,j])
W <- function(i,j){
left <- ifelse(j==1,0,S[i-1,j])
right <- ifelse(j==n,0,S[i+1,j])
up <- ifelse(i==1,0,S[i+1,j])
down <- ifelse(i==n,0,S[i+1,j])
W <- sum(left,right,up,down)
return(W)
}
W(1,1)
S
ifelse(i==1,0,S[i+1,j])
left <- ifelse(j==1,0,S[i-1,j])
right <- ifelse(j==n,0,S[i+1,j])
up <- ifelse(i==1,0,S[i+1,j])
down <- ifelse(i==n,0,S[i+1,j])
left
right
left <- ifelse(j==1,0,S[i,j-1])
right <- ifelse(j==n,0,S[i,j+1])
up <- ifelse(i==1,0,S[i-1,j])
down <- ifelse(i==n,0,S[i-1,j])
W <- function(i,j){
left <- ifelse(j==1,0,S[i,j-1])
right <- ifelse(j==n,0,S[i,j+1])
up <- ifelse(i==1,0,S[i-1,j])
down <- ifelse(i==n,0,S[i-1,j])
W <- sum(left,right,up,down)
return(W)
}
W[1,1]
W(1,1)
W <- function(S,i,j){
left <- ifelse(j==1,0,S[i,j-1])
right <- ifelse(j==n,0,S[i,j+1])
up <- ifelse(i==1,0,S[i-1,j])
down <- ifelse(i==n,0,S[i-1,j])
w <- sum(left,right,up,down)
return(w)
}
W(S,1,1)
left <- ifelse(j==1,0,S[i,j-1])
right <- ifelse(j==n,0,S[i,j+1])
up <- ifelse(i==1,0,S[i-1,j])
down <- ifelse(i==n,0,S[i-1,j])
left
S
right
up
down
n <-4
W <- function(i,j){
n <- dim(S)[1]
left <- ifelse(j==1,0,S[i,j-1])
right <- ifelse(j==n,0,S[i,j+1])
up <- ifelse(i==1,0,S[i-1,j])
down <- ifelse(i==n,0,S[i+1,j])
w <- sum(left,right,up,down)
return(w)
}
S
W(1,1)
W(1,2)
W(1,3)
W(1,4)
W(4,4)
W(4,1)
runif(0,10)
runif(0,1)
runif(1)
n <- 50
S <- matrix(sample(c(-1,1),n*n,replace = T),nrow = n)
image(S,col = c('white','black'))
w <- function(i,j){
left <- ifelse(j==1,0,S[i,j-1])
right <- ifelse(j==n,0,S[i,j+1])
up <- ifelse(i==1,0,S[i-1,j])
down <- ifelse(i==n,0,S[i+1,j])
w <- sum(left,right,up,down)
return(w)
}
cond.prob <- function(J,W){
exp(J*W)/(exp(-J*W)+exp(J*W))
}
J <- 2
n.iter <- 100
samples <- array(dim=c(n,n,n.iter))
for(iter in 1:n.iter){
for (i in 1:n){
for (j in 1:n){
W <- w(i,j)
prob <- cond.prob(J,W)
S[i,j] <-ifelse(runif(0,1) < prob,1,-1)
samples[i,j,iter] <- S[i,j]
}
}
}
i <-1,
j<-1
i <-1
W <- w(i,j)
prob <- cond.prob(J,W)
prob
S[i,j] <-ifelse(runif(0,1) < prob,1,-1)
runif(0,1) < prob
ifelse(runif(1) < prob, 1, -1)
runif(1) < prob
J <- 2
n.iter <- 100
samples <- array(dim=c(n,n,n.iter))
for(iter in 1:n.iter){
for (i in 1:n){
for (j in 1:n){
W <- w(i,j)
prob <- cond.prob(J,W)
S[i,j] <-ifelse(runif(1) < prob, 1, -1)
samples[i,j,iter] <- S[i,j]
}
}
}
image(S, col = c("white", "black"))
S
S0 <- matrix(sample(c(-1,1),n*n,replace = T),nrow = n)
image(S0,col = c('white','black'))
samples <- array(dim=c(n,n,n.iter))
for(iter in 1:n.iter){
for (i in 1:n){
for (j in 1:n){
W <- w(i,j)
prob <- cond.prob(J,W)
S[i,j] <-ifelse(runif(1) < prob, 1, -1)
samples[i,j,iter] <- S[i,j]
}
}
}
image(S, col = c("white", "black"))
n.iter <- 10000
samples <- array(dim=c(n,n,n.iter))
for(iter in 1:n.iter){
for (i in 1:n){
for (j in 1:n){
W <- w(i,j)
prob <- cond.prob(J,W)
S[i,j] <-ifelse(runif(1) < prob, 1, -1)
samples[i,j,iter] <- S[i,j]
}
}
}
# plot final spin configuration
image(S, col = c("white", "black"))
images(samples[,,100],col=c('white','black'))
image(samples[,,100],col=c('white','black'))
cond.prob <- function(J,W){
exp(-J*W)/(exp(-J*W)+exp(J*W))
}
J <- 2
n.iter <- 100
samples <- array(dim=c(n,n,n.iter))
for(iter in 1:n.iter){
for (i in 1:n){
for (j in 1:n){
W <- w(i,j)
prob <- cond.prob(J,W)
S[i,j] <-ifelse(runif(1) < prob, 1, -1)
samples[i,j,iter] <- S[i,j]
}
}
}
image(S, col = c("white", "black"))
J <- 2
n.iter <- 100
samples <- array(dim=c(n,n,n.iter))
for(iter in 1:n.iter){
for (i in 1:n){
for (j in 1:n){
W <- w(i,j)
prob <- cond.prob(J,W)
S[i,j] <-ifelse(runif(1) < prob, 1, -1)
samples[i,j,iter] <- S[i,j]
}
}
}
# plot final spin configuration
image(S, col = c("white", "black"))
cond.prob <- function(J,W){
exp(J*W)/(exp(-J*W)+exp(J*W))
}
J <- 2
n.iter <- 100
samples <- array(dim=c(n,n,n.iter))
for(iter in 1:n.iter){
for (i in 1:n){
for (j in 1:n){
W <- w(i,j)
prob <- cond.prob(J,W)
S[i,j] <-ifelse(runif(1) < prob, 1, -1)
samples[i,j,iter] <- S[i,j]
}
}
}
# plot final spin configuration
image(S, col = c("white", "black"))
my.fun <- function(){
for(iter in 1:n.iter){
for (i in 1:n){
for (j in 1:n){
W <- w(i,j)
prob <- cond.prob(J,W)
S[i,j] <-ifelse(runif(1) < prob, 1, -1)
}
}
}
# plot final spin configuration
image(S, col = c("white", "black"))
}
my.fun()
replicate(3,my.fun)
w <- function(i,j){
left <- ifelse(j==1,0,S[i,j-1])
right <- ifelse(j==n,0,S[i,j+1])
up <- ifelse(i==1,0,S[i-1,j])
down <- ifelse(i==n,0,S[i+1,j])
w <- sum(left,right,up,down)
return(w)
}
cond.prob <- function(J,W){
exp(J*W)/(exp(-J*W)+exp(J*W))
}
w <- function(i,j){
left <- ifelse(j==1,0,S[i,j-1])
right <- ifelse(j==n,0,S[i,j+1])
up <- ifelse(i==1,0,S[i-1,j])
down <- ifelse(i==n,0,S[i+1,j])
w <- sum(left,right,up,down)
return(w)
}
cond.prob <- function(J,W){
exp(J*W)/(exp(-J*W)+exp(J*W))
}
n.iter <- 100
my.fun <- function(J){
## Generate a random image
n <- 50
S <- matrix(sample(c(-1,1),n*n,replace = T),nrow = n)
image(S,col = c('white','black'))
for(iter in 1:n.iter){
for (i in 1:n){
for (j in 1:n){
W <- w(i,j)
prob <- cond.prob(J,W)
S[i,j] <-ifelse(runif(1) < prob, 1, -1)
}
}
}
# plot final spin configuration
image(S, col = c("white", "black"))
}
my.fun(2)
n <- 50
S <- matrix(sample(c(-1,1),n*n,replace = T),nrow = n)
image(S,col = c('white','black'))
for(iter in 1:n.iter){
for (i in 1:n){
for (j in 1:n){
W <- w(i,j)
prob <- cond.prob(J,W)
S[i,j] <-ifelse(runif(1) < prob, 1, -1)
}
}
}
image(S, col = c("white", "black"))
my.fun(2)
my.fun(2)
my.fun <- function(J){
## Generate a random image
n <- 50
S <- matrix(sample(c(-1,1),n*n,replace = T),nrow = n)
image(S,col = c('white','black'))
for(iter in 1:n.iter){
for (i in 1:n){
for (j in 1:n){
W <- w(i,j,S)
prob <- cond.prob(J,W)
S[i,j] <-ifelse(runif(1) < prob, 1, -1)
}
}
}
# plot final spin configuration
image(S, col = c("black", "white"))
}
my.fun(2)
my.fun <- function(J){
## Generate a random image
n <- 50
S <- matrix(sample(c(-1,1),n*n,replace = T),nrow = n)
image(S,col = c('white','black'))
for(iter in 1:n.iter){
for (i in 1:n){
for (j in 1:n){
W <- w(i,j,S)
prob <- cond.prob(J,W)
S[i,j] <-ifelse(runif(1) < prob, 1, -1)
}
}
}
# plot final spin configuration
image(S, col = c("black", "white"))
}
my.fun(2)
DATA <- read.table('C:/Users/xie15/OneDrive/Desktop/cloneCluster2.txt')
dim(DATA)
DATA[1:5]
DATA[1:5,]
head(DATA)
A <- grep('clone',DATA$V1)
A
A[1]
A[2]
length(A)
AA <- paste0(A,1:263)
AA[1]
AA[2]
AA[1:4]
AA <- paste0('clone',1:263)
AA <- paste0('>clone',1:263)
AA[1:3]
DATA$V1[A[1]]
DATA$V1[A[2]]
DATA$V1[A]<- AA
DATA$V1[A][1:4]
write.table(DATA,file = 'C:/Users/xie15/OneDrive/Desktop/cloneCluster2Update.txt')
DATA <- read.table('C:/Users/xie15/OneDrive/Desktop/cloneCluster3.txt')
DATA[1:4,]
A <- grep('clone',DATA$V1)
length(A)
nrow(A)
nrow(DATA)
AA <- paste0('>clone',1:219)
DATA$V1[A]<- AA
write.table(DATA,file = 'C:/Users/xie15/OneDrive/Desktop/cloneCluster3Update.txt')
DATA <- read.table('C:/Users/xie15/OneDrive/Desktop/cloneCluster4.txt')
A <- grep('clone',DATA$V1)
length(A0)
length(A)
AA <- paste0('>clone',1:146)
DATA$V1[A]<- AA
write.table(DATA,file = 'C:/Users/xie15/OneDrive/Desktop/cloneCluster4Update.txt')
DATA <- read.table('C:/Users/xie15/OneDrive/Desktop/cloneCluster2.txt')
A <- grep('clone',DATA$V1)
length(A)
AA <- paste0('>clone',1:263)
DATA$V1[A]<- AA
write.table(DATA,file = 'C:/Users/xie15/OneDrive/Desktop/cloneCluster2Update.txt')
DATA <- read.table('C:/Users/xie15/OneDrive/Desktop/cloneCluster1.txt')
A <- grep('clone',DATA$V1)
length(A)
AA <- paste0('>clone',1:265)
DATA$V1[A]<- AA
write.table(DATA,file = 'C:/Users/xie15/OneDrive/Desktop/cloneCluster1Update.txt')
library(roxygen2)
setwd('C:/project/LRT')
document()
setwd('..')
library("devtools")
document()
setwd('C:/project/LRT')
document()
document()
setwd('..')
install('LRT')
TCR <- read.csv('C:/project/TCR-seq/Gang/GSE158896_RAW/combinedTCR_2cells.csv')
load('C:/manuscripts/PCB/data/Mice.sub2.rda')
Combined <-LRT::getCombinedDataSet(TCR,Mice.sub2)
library(LRT)
shinyClone(Combined)
Trajectory <- LRT::getOverallTrajectory(Combined,start.clus = 'Naive')
Trajectory <- LRT::getOverallTrajectory(Combined,start.clus = 'Tcmp')
Combined@seurat$clusters[1:3]
CombinedDataSet <- Combined
seurat <- CombinedDataSet@seurat
temp.df <- data.frame(cell = colnames(seurat),clone=seurat$CTaa,clusters = seurat$clusters)
temp.df1 <- temp.df %>% dplyr::group_by(clone,clusters) %>% dplyr::summarise(n=n())
library(dplyr)
temp.df1 <- temp.df %>% dplyr::group_by(clone,clusters) %>% dplyr::summarise(n=n())
temp.df1.wide <- temp.df1%>% tidyr::pivot_wider(names_from = cluster,values_from = n,values_fill=0)
library(tidyr)
temp.df1.wide <- temp.df1%>% tidyr::pivot_wider(names_from = cluster,values_from = n,values_fill=0)
temp.df1[1:3,]
temp.df1.wide <- temp.df1%>% tidyr::pivot_wider(names_from = clusters,values_from = n,values_fill=0)
temp.df1.wide2 <- temp.df1.wide[rowSums(temp.df1.wide[,2:ncol(temp.df1.wide2)])>4,]
temp.df1.wide2 <- temp.df1.wide[rowSums(temp.df1.wide[,2:ncol(temp.df1.wide)])>4,]
seurat <- subset(seurat, subset = CTaa %in% temp.df1.wide2$clone)
sce <- Seurat::as.SingleCellExperiment(seurat,assay='RNA')
CLUSTERS <- SingleCellExperiment::colData(sce)$clusters
sce <- slingshot(sce,reducedDim = 'UMAP',clusterLavels=CLUSTERS,start.clus='Tcmp')
library(slingshot)
sce <- slingshot(sce,reducedDim = 'UMAP',clusterLavels=CLUSTERS,start.clus='Tcmp')
sce <- slingshot(sce,reducedDim = 'UMAP',clusterLabels=CLUSTERS,start.clus='Tcmp')
remove.packages("LRT", lib="~/R/win-library/4.1")
setwd('C:/project/LRT')
document()
q()
